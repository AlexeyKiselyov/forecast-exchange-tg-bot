export const EMOJI = {
  weather: {
    sunny: '‚òÄÔ∏è',
    cloudy: '‚òÅÔ∏è',
    rainy: 'üåßÔ∏è',
    snowy: '‚ùÑÔ∏è',
    windy: 'üí®',
    temp: 'üå°Ô∏è',
    humidity: 'üíß',
    pressure: 'üìä',
  },
  currency: {
    dollar: 'üíµ',
    euro: 'üí∂',
    exchange: 'üí±',
    up: 'üìà',
    down: 'üìâ',
    equal: '‚û°Ô∏è',
  },
  ui: {
    clock: 'üïê',
    calendar: 'üìÖ',
    location: 'üìç',
    warning: '‚ö†Ô∏è',
    info: '‚ÑπÔ∏è',
    success: '‚úÖ',
    loading: '‚è≥',
    back: '‚¨ÖÔ∏è',
    home: 'üè†',
  },
};

// Creates a nice header (visual centering)
export const createHeader = (title, emoji = '', decorative = true) => {
  // Build header text with emojis on both sides (if provided)
  const headerText = emoji ? `${emoji} ${title} ${emoji}` : title;

  // Target "line width" in characters for visual centering.
  const ENV_TARGET = Number(process.env.HEADER_TARGET_WIDTH);
  const TARGET_WIDTH = Math.max(
    24,
    Math.min(40, Number.isFinite(ENV_TARGET) ? ENV_TARGET : 32)
  );

  // Count by code points (works better with emojis than .length)
  const codePointLength = Array.from(headerText).length;

  // Use Braille blank U+2800 ‚Äî doesn't collapse in Telegram
  const PAD = '‚†Ä';

  const totalPad = Math.max(0, TARGET_WIDTH - codePointLength);

  // Slight right bias: emojis are visually wider than 1 character
  const emojiMatches = headerText.match(
    /[\u{1F300}-\u{1FAFF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu
  );
  const emojiCount = emojiMatches ? emojiMatches.length : 0;
  // Conservative bias: apply 1 "space" only if emojis exist on both sides
  const hasBothSidesEmoji = emojiCount >= 2;
  const bias = hasBothSidesEmoji ? 1 : 0;

  let leftPad = Math.ceil(totalPad / 2) + bias;
  if (leftPad > totalPad) leftPad = totalPad; // guard for small totalPad
  const rightPad = totalPad - leftPad;

  const left = PAD.repeat(leftPad);
  const right = PAD.repeat(rightPad);

  // Return bold header with symmetric "spaces" for centered look
  const lineTop = `${left}**${headerText}**${right}`;

  if (!decorative) return lineTop;

  // Decorative underline below the header
  const DECOR = (process.env.HEADER_DECOR_CHAR || '‚îÄ').slice(0, 1); // line character
  // Full width underline is controlled by env vars
  const DECOR_FULL = ['1', 'true', 'yes'].includes(
    String(process.env.HEADER_DECOR_FULL || '').toLowerCase()
  );
  const ENV_DECOR_WIDTH = Number(process.env.HEADER_DECOR_WIDTH);
  // If full-width mode is enabled and no width is provided ‚Äî use a larger default
  const defaultFullWidth = 64;
  const rawDecorWidth = Number.isFinite(ENV_DECOR_WIDTH)
    ? ENV_DECOR_WIDTH
    : DECOR_FULL
    ? defaultFullWidth
    : TARGET_WIDTH;
  const DECOR_WIDTH = Math.max(24, Math.min(160, rawDecorWidth));

  let lineBottom;
  if (DECOR_FULL) {
    // Full width: solid line without side padding, length DECOR_WIDTH
    const fullUnderline = DECOR.repeat(DECOR_WIDTH);
    lineBottom = fullUnderline;
  } else {
    // Default: underline within the header "block"
    const underline = DECOR.repeat(codePointLength);
    lineBottom = `${left}${underline}${right}`;
  }

  return `${lineTop}\n${lineBottom}`;
};

// Creates a simple info card
export const createCard = (title, content, emoji = '') => {
  return `${emoji} **${title}**\n${content}\n`;
};

// Formats UNIX timestamp to DD.MM HH:mm
export const formatTime = timestamp => {
  const date = new Date(timestamp * 1000);
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');

  return `${day}.${month} ${hours}:${minutes}`;
};

// Formats currency rate message
export const formatCurrencyRate = (
  currency,
  rateBuy,
  rateSell,
  date,
  trend = null
) => {
  const currencyEmoji =
    currency === 'USD' ? EMOJI.currency.dollar : EMOJI.currency.euro;
  const trendEmoji =
    trend === 'up'
      ? EMOJI.currency.up
      : trend === 'down'
      ? EMOJI.currency.down
      : EMOJI.currency.equal;

  return `${createHeader(`${currency}/UAH`, currencyEmoji)}

${EMOJI.ui.calendar} *–î–∞—Ç–∞:* ${date}
${trendEmoji} *–¢–µ–Ω–¥–µ–Ω—Ü—ñ—è:* ${
    trend === 'up' ? '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è' : trend === 'down' ? '–ü–∞–¥—ñ–Ω–Ω—è' : '–°—Ç–∞–±—ñ–ª—å–Ω–æ'
  }

${EMOJI.currency.exchange} *–ö—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É:*
‚ñ´Ô∏è –ü–æ–∫—É–ø–∫–∞: *${rateBuy} ‚Ç¥*
‚ñ´Ô∏è –ü—Ä–æ–¥–∞–∂: *${rateSell} ‚Ç¥*

${EMOJI.ui.info} _–î–∞–Ω—ñ –∑ MonoBank API_`;
};

// Formats weather forecast message
export const formatWeatherForecast = (cityName, forecasts, queryType) => {
  const weatherEmoji = getWeatherEmoji(forecasts[0]?.weather?.[0]?.main);

  let header = '';
  switch (queryType) {
    case '–ö–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏ üïí':
      header = createHeader(`–ü–æ–≥–æ–¥–∞ –∫–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏`, EMOJI.weather.temp);
      break;
    case '–ö–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω üïï':
      header = createHeader(`–ü–æ–≥–æ–¥–∞ –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω`, EMOJI.weather.temp);
      break;
    case '–í—ñ—Ç–µ—Ä üí®':
      header = createHeader(`–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ—Ç–µ—Ä`, EMOJI.weather.windy);
      break;
    default:
      header = createHeader(`–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏`, weatherEmoji);
  }

  const location = `${EMOJI.ui.location} **–ú—ñ—Å—Ç–æ:** ${cityName}\n`;

  const forecastItems = forecasts
    .map(item => {
      const {
        dt,
        main: { temp },
        weather: [{ main, description }],
        wind: { speed, deg, gust },
      } = item;
      const time = formatTime(dt);
      const weatherIcon = getWeatherEmoji(main);

      if (queryType === '–í—ñ—Ç–µ—Ä üí®') {
        return `${EMOJI.ui.clock} **${time}**
${EMOJI.weather.windy} –®–≤–∏–¥–∫—ñ—Å—Ç—å: **${speed} –º/—Å**
üß≠ –ù–∞–ø—Ä—è–º–æ–∫: **${deg}¬∞**
üí• –ü–æ—Ä–∏–≤: **${gust || '–Ω/–¥'} –º/—Å**
`;
      } else {
        return `${EMOJI.ui.clock} **${time}**
${weatherIcon} **${temp}¬∞C** - ${translateWeather(description)}
${EMOJI.weather.windy} –í—ñ—Ç–µ—Ä: **${speed} –º/—Å**
`;
      }
    })
    .join('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n');

  return `${header}\n${location}\n${forecastItems}\n${EMOJI.ui.info} _–î–∞–Ω—ñ –∑ OpenWeatherMap_`;
};

// Returns an emoji by weather type
const getWeatherEmoji = weatherType => {
  const weatherMap = {
    Clear: EMOJI.weather.sunny,
    Clouds: EMOJI.weather.cloudy,
    Rain: EMOJI.weather.rainy,
    Snow: EMOJI.weather.snowy,
    Thunderstorm: '‚õàÔ∏è',
    Drizzle: 'üå¶Ô∏è',
    Mist: 'üå´Ô∏è',
    Fog: 'üå´Ô∏è',
  };
  return weatherMap[weatherType] || EMOJI.weather.cloudy;
};

// Translates weather description (EN -> UK)
const translateWeather = description => {
  const translations = {
    'clear sky': '—è—Å–Ω–µ –Ω–µ–±–æ',
    'few clouds': '–º–∞–ª–æ —Ö–º–∞—Ä',
    'scattered clouds': '—Ä–æ–∑—Å—ñ—è–Ω—ñ —Ö–º–∞—Ä–∏',
    'broken clouds': '—Ö–º–∞—Ä–Ω–æ',
    'shower rain': '–¥–æ—â –∑ –≥—Ä–æ–∑–æ—é',
    rain: '–¥–æ—â',
    thunderstorm: '–≥—Ä–æ–∑–∞',
    snow: '—Å–Ω—ñ–≥',
    mist: '—Ç—É–º–∞–Ω',
    'overcast clouds': '—Å—É—Ü—ñ–ª—å–Ω–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å',
  };
  return translations[description?.toLowerCase()] || description;
};

// Creates a loading message by type
export const createLoadingMessage = type => {
  const messages = {
    weather: `${EMOJI.ui.loading} –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏...`,
    currency: `${EMOJI.ui.loading} –û—Ç—Ä–∏–º—É—é –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç...`,
    default: `${EMOJI.ui.loading} –û–±—Ä–æ–±–ª—è—é –∑–∞–ø–∏—Ç...`,
  };
  return messages[type] || messages.default;
};

// Creates an error message
export const createErrorMessage = (error, type) => {
  return `${EMOJI.ui.warning} **–ü–æ–º–∏–ª–∫–∞**

–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ${type === 'weather' ? '–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã' : '–∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç'}.

${EMOJI.ui.info} –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

_–î–µ—Ç–∞–ª—ñ: ${error}_`;
};
