import 'dotenv/config';
import TelegramBot from 'node-telegram-bot-api';

import { TG_BOT_TOKEN } from './helpers/constants.js';
import { getForecast } from './helpers/getForecast.js';
import { getRate, compareRates } from './helpers/getRate.js';
import {
  optionsStart,
  optionsWeatherMenu,
  optionsRateMenu,
  inlineOptionsStart,
  inlineOptionsWeatherMenu,
  inlineOptionsRateMenu,
  inlineCompareOptions,
  inlineOptionsCityMenu,
} from './helpers/buttonsOptions.js';
import {
  createLoadingMessage,
  createHeader,
  EMOJI,
} from './helpers/messageFormatter.js';

const bot = new TelegramBot(TG_BOT_TOKEN, { polling: true });

// Keep loading state per chat
const loadingStates = new Map();

// Keep selected cities per user
const userCities = new Map();

// Track city input waiting state
const waitingForCityInput = new Map();

// Get user's current city
const getUserCity = userId => {
  return userCities.get(userId) || process.env.CITY || 'Kyiv';
};

// Set user's current city
const setUserCity = (userId, city) => {
  userCities.set(userId, city);
};

bot.setMyCommands([
  { command: '/start', description: '–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º üöÄ' },
  { command: '/help', description: '–î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó üìã' },
  { command: '/weather', description: '–®–≤–∏–¥–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ ‚ö°' },
  { command: '/rates', description: '–®–≤–∏–¥–∫—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç ‚ö°' },
]);

// Send a temporary loading message
async function sendLoadingMessage(chatId, type) {
  const loadingMsg = await bot.sendMessage(chatId, createLoadingMessage(type));
  loadingStates.set(chatId, loadingMsg.message_id);
  return loadingMsg.message_id;
}

// Update a message in place; fallback to send new on failure
async function updateMessage(chatId, messageId, text, options) {
  try {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      ...options,
    });
    loadingStates.delete(chatId);
  } catch (error) {
    const desc = error?.response?.body?.description || error?.message || '';
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–µ–∑–≤—Ä–µ–¥–Ω—É—é –æ—à–∏–±–∫—É Telegram "message is not modified"
    if (typeof desc === 'string' && desc.includes('message is not modified')) {
      loadingStates.delete(chatId);
      return;
    }
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(chatId, text, { parse_mode: 'Markdown', ...options });
    loadingStates.delete(chatId);
  }
}

// Text messages handler
bot.on('message', async msg => {
  const text = msg.text;
  const chatId = msg.chat.id;
  const clientName = msg.from.first_name;
  const userId = msg.from.id;
  const currentTime = new Date().toLocaleTimeString('uk-UA');

  // If user is expected to input city name
  if (waitingForCityInput.get(userId)) {
    waitingForCityInput.delete(userId);

    // Validate the city name by trying an API call
    try {
      const messageId = await sendLoadingMessage(chatId, 'weather');
      const forecast = await getForecast('weather_quick', text);

      // On success ‚Äî store the city for the user
      setUserCity(userId, text);

      await updateMessage(
        chatId,
        messageId,
        forecast,
        inlineOptionsWeatherMenu
      );

      // Send confirmation
      setTimeout(async () => {
        await bot.sendMessage(
          chatId,
          `${EMOJI.ui.success} –ú—ñ—Å—Ç–æ **${text}** –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –≤–∞—à–µ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º!`,
          {
            parse_mode: 'Markdown',
          }
        );
      }, 1000);

      return;
    } catch (error) {
      const errorMessage = `${EMOJI.ui.warning} **–ü–æ–º–∏–ª–∫–∞**\n\n–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ "${text}". –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é.`;
      await bot.sendMessage(chatId, errorMessage, {
        parse_mode: 'Markdown',
        ...inlineOptionsCityMenu,
      });
      return;
    }
  }

  try {
    if (text === '/start') {
      const welcomeMessage = `
${createHeader('–õ–ê–°–ö–ê–í–û –ü–†–û–°–ò–ú–û', 'üéâ')}

–ü—Ä–∏–≤—ñ—Ç, **${clientName}**! üëã

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è:

${EMOJI.weather.temp} **–ü—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏** 
${EMOJI.currency.exchange} **–ö—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç**

${EMOJI.ui.info} –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:
`;
      return await bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'Markdown',
        ...inlineOptionsStart,
      });
    }

    if (text === '/help') {
      const helpMessage = `
${createHeader('–î–û–ü–û–ú–û–ì–ê', 'üìã')}

**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞  
/weather - –®–≤–∏–¥–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑
/rates - –®–≤–∏–¥–∫—ñ –∫—É—Ä—Å–∏

**–§—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞:**
${EMOJI.weather.temp} –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏
${EMOJI.weather.windy} –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ—Ç–µ—Ä
${EMOJI.currency.dollar} –ö—É—Ä—Å–∏ USD —Ç–∞ EUR
${EMOJI.currency.exchange} –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∞–ª—é—Ç

${EMOJI.ui.info} –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≤ –º–µ–Ω—é –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏!
`;
      return await bot.sendMessage(chatId, helpMessage, {
        parse_mode: 'Markdown',
        ...inlineOptionsStart,
      });
    }

    if (text === '/weather') {
      const messageId = await sendLoadingMessage(chatId, 'weather');
      const userCity = getUserCity(msg.from.id);
      const forecast = await getForecast('weather_quick', userCity);
      await updateMessage(
        chatId,
        messageId,
        forecast,
        inlineOptionsWeatherMenu
      );
      return;
    }

    if (text === '/rates') {
      const messageId = await sendLoadingMessage(chatId, 'currency');
      const rates = await compareRates();
      await updateMessage(chatId, messageId, rates, inlineOptionsRateMenu);
      return;
    }

    // Support old text commands for backward compatibility
    if (text === '/–ü–æ–≥–æ–¥–∞ üå°Ô∏è') {
      const weatherMessage = `${createHeader(
        '–ú–ï–ù–Æ –ü–û–ì–û–î–ò',
        EMOJI.weather.temp
      )}\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑—É:`;
      return await bot.sendMessage(chatId, weatherMessage, {
        parse_mode: 'Markdown',
        ...inlineOptionsWeatherMenu,
      });
    }

    if (text === '/–ö—É—Ä—Å –≤–∞–ª—é—Ç üíπ') {
      const currencyMessage = `${createHeader(
        '–ú–ï–ù–Æ –í–ê–õ–Æ–¢',
        EMOJI.currency.exchange
      )}\n\n–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –∞–±–æ –¥—ñ—é:`;
      return await bot.sendMessage(chatId, currencyMessage, {
        parse_mode: 'Markdown',
        ...inlineOptionsRateMenu,
      });
    }

    // More legacy text commands
    if (['–ö–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏ üïí', '–ö–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω üïï', '–í—ñ—Ç–µ—Ä üí®'].includes(text)) {
      const messageId = await sendLoadingMessage(chatId, 'weather');
      const userCity = getUserCity(msg.from.id);
      const forecast = await getForecast(text, userCity);
      await updateMessage(
        chatId,
        messageId,
        forecast,
        inlineOptionsWeatherMenu
      );
      return;
    }

    if (['USD', 'EUR'].includes(text)) {
      const messageId = await sendLoadingMessage(chatId, 'currency');
      const rate = await getRate(text);
      await updateMessage(chatId, messageId, rate, inlineOptionsRateMenu);
      return;
    }

    if (text === '–ü–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é ‚¨ÖÔ∏è') {
      const mainMessage = `${createHeader(
        '–ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ',
        EMOJI.ui.home
      )}\n\n**${clientName}**, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:`;
      return await bot.sendMessage(chatId, mainMessage, {
        parse_mode: 'Markdown',
        ...inlineOptionsStart,
      });
    }
  } catch (error) {
    console.log(`Error: ${error.message}`);
    const errorMessage = `${EMOJI.ui.warning} **–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞**\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n_–ß–∞—Å: ${currentTime}_`;
    return bot.sendMessage(chatId, errorMessage, {
      parse_mode: 'Markdown',
      ...inlineOptionsStart,
    });
  }

  // Unknown command fallback
  const unknownMessage = `${EMOJI.ui.info} –Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É, **${clientName}**.\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏ /help`;
  return bot.sendMessage(chatId, unknownMessage, {
    parse_mode: 'Markdown',
    ...inlineOptionsStart,
  });
});

// Inline buttons handler
bot.on('callback_query', async callbackQuery => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;
  const clientName = callbackQuery.from.first_name;

  // Show loading indicator on callback
  await bot.answerCallbackQuery(callbackQuery.id, {
    text: '‚è≥ –û–±—Ä–æ–±–ª—è—é...',
    show_alert: false,
  });

  try {
    switch (data) {
      case 'main_menu':
        const mainMessage = `${createHeader(
          '–ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ',
          EMOJI.ui.home
        )}\n\n**${clientName}**, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:`;
        await bot.editMessageText(mainMessage, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsStart,
        });
        break;

      case 'weather_menu':
        const weatherMessage = `${createHeader(
          '–ú–ï–ù–Æ –ü–û–ì–û–î–ò',
          EMOJI.weather.temp
        )}\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑—É:`;
        await bot.editMessageText(weatherMessage, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsWeatherMenu,
        });
        break;

      case 'currency_menu':
        const currencyMessage = `${createHeader(
          '–ú–ï–ù–Æ –í–ê–õ–Æ–¢',
          EMOJI.currency.exchange
        )}\n\n–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –∞–±–æ –¥—ñ—é:`;
        await bot.editMessageText(currencyMessage, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsRateMenu,
        });
        break;

      case 'weather_3h':
      case 'weather_6h':
      case 'weather_wind':
      case 'weather_quick':
        await bot.editMessageText(createLoadingMessage('weather'), {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
        });
        const userCity = getUserCity(callbackQuery.from.id);
        const forecast = await getForecast(data, userCity);
        await bot.editMessageText(forecast, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsWeatherMenu,
        });
        break;

      case 'weather_refresh':
        await bot.editMessageText(createLoadingMessage('weather'), {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
        });
        const userCityRefresh = getUserCity(callbackQuery.from.id);
        const refreshedForecast = await getForecast(
          'weather_quick',
          userCityRefresh
        );
        await bot.editMessageText(refreshedForecast, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsWeatherMenu,
        });
        break;

      case 'select_city':
        const currentCity = getUserCity(callbackQuery.from.id);
        const cityMessage = `${createHeader('–í–ò–ë–Ü–† –ú–Ü–°–¢–ê', 'üèôÔ∏è')}\n\n${
          EMOJI.ui.location
        } **–ü–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ:** ${currentCity}\n\n–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏:`;
        await bot.editMessageText(cityMessage, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsCityMenu,
        });
        break;

      // City selection handlers
      case 'city_Kyiv':
      case 'city_Kharkiv':
      case 'city_Odesa':
      case 'city_Dnipro':
      case 'city_Lviv':
      case 'city_Zaporizhzhia':
      case 'city_Kryvyi Rih':
      case 'city_Mykolaiv':
      case 'city_Mariupol':
        const selectedCity = data.split('_')[1].replace('Rih', 'Rih'); // Kryvyi Rih
        setUserCity(callbackQuery.from.id, selectedCity);

        await bot.editMessageText(createLoadingMessage('weather'), {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
        });

        const cityForecast = await getForecast('weather_quick', selectedCity);
        await bot.editMessageText(cityForecast, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsWeatherMenu,
        });

        // Send confirmation after 1 second
        setTimeout(async () => {
          await bot.sendMessage(
            chatId,
            `${EMOJI.ui.success} –ú—ñ—Å—Ç–æ **${selectedCity}** –æ–±—Ä–∞–Ω–æ —è–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º!`,
            {
              parse_mode: 'Markdown',
            }
          );
        }, 1000);
        break;

      case 'custom_city':
        waitingForCityInput.set(callbackQuery.from.id, true);
        const customCityMessage = `${EMOJI.ui.info} **–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞**\n\n–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é.\n\n_–ü—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤, Kyiv, –•–∞—Ä–∫—ñ–≤, Kharkiv_`;
        await bot.editMessageText(customCityMessage, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsCityMenu,
        });
        break;

      case 'rate_USD':
      case 'rate_EUR':
        await bot.editMessageText(createLoadingMessage('currency'), {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
        });
        const currency = data.split('_')[1];
        const rate = await getRate(currency);
        await bot.editMessageText(rate, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsRateMenu,
        });
        break;

      case 'rate_compare':
        await bot.editMessageText(createLoadingMessage('currency'), {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
        });
        const comparison = await compareRates();
        await bot.editMessageText(comparison, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineCompareOptions,
        });
        break;

      case 'rate_refresh':
        await bot.editMessageText(createLoadingMessage('currency'), {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
        });
        const refreshedRates = await compareRates();
        await bot.editMessageText(refreshedRates, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsRateMenu,
        });
        break;

      case 'rate_quick':
        await bot.editMessageText(createLoadingMessage('currency'), {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
        });
        const quickRates = await compareRates();
        await bot.editMessageText(quickRates, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsRateMenu,
        });
        break;

      case 'compare_usd_eur':
        await bot.editMessageText(createLoadingMessage('currency'), {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
        });
        const usdEurComparison = await compareRates();
        await bot.editMessageText(usdEurComparison, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineCompareOptions,
        });
        break;

      case 'about':
        const aboutMessage = `
${createHeader('–ü–†–û –ë–û–¢–ê', '‚ÑπÔ∏è')}

**–§—É–Ω–∫—Ü—ñ—ó:**
${EMOJI.weather.temp} –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –≤—ñ–¥ OpenWeatherMap
${EMOJI.currency.exchange} –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –≤—ñ–¥ MonoBank
${EMOJI.ui.clock} –ê–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
${EMOJI.weather.windy} –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ—Ç–µ—Ä

**–í–µ—Ä—Å—ñ—è:** 2.0
**–†–æ–∑—Ä–æ–±–Ω–∏–∫:** Oleksii Kysel'ov
**–î–∞—Ç–∞:** ${new Date().toLocaleDateString('uk-UA')}

${EMOJI.ui.info} –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
`;
        await bot.editMessageText(aboutMessage, {
          chat_id: chatId,
          message_id: msg.message_id,
          parse_mode: 'Markdown',
          ...inlineOptionsStart,
        });
        break;

      default:
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: '‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞',
          show_alert: true,
        });
    }
  } catch (error) {
    const desc = error?.response?.body?.description || error?.message || '';
    console.log(`Callback error: ${desc}`);
    // Harmless: trying to edit with the same content/markup ‚Äì ignore silently
    if (typeof desc === 'string' && desc.includes('message is not modified')) {
      return;
    }
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞',
      show_alert: true,
    });
  }
});
